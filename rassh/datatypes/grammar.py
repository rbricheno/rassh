class Grammar(object):
    """Instances of the Grammar class are objects used as structures to track details about the commands the API is
    able to process. They are used by WellFormedCommand to check that all of the correct parameters are supplied when
    running. Most Grammar objects should be auto-generated by the ExpectManager class.

    Part of the Bonaire grammar, for example, when generated, looks like this (if it were declared manually):

    |    self.parameters = {
    |        'lms_switch_ip':
    |            {'object_type': 'ap',
    |             'payload': ['switch_ip', ]},
    |        'ble':
    |        # N.B. you can't GET a "cancel" and have something meaningful returned to you.
    |            {'object_type': 'ap',
    |             'payload': []},
    |        'cancel':
    |        # N.B. you can't GET a "cancel" and have something meaningful returned to you.
    |            {'object_type': 'ap',
    |             'payload': []},
    |        'essid':
    |            {'object_type': 'ssid_profile',
    |             'payload': ['essid', ]},
    |        'group':
    |            {'object_type': 'ap',
    |             'payload': ['ap_group', ]},
    |        'group_and_gains':
    |            {'object_type': 'ap',
    |             'payload': ['ap_group', 'a_ant_gain', 'g_ant_gain']},
    |        'group_and_gains_and_rap':
    |            {'object_type': 'ap',
    |             'payload': ['ap_group', 'a_ant_gain', 'g_ant_gain', 'remote_ap']},
    |        'group_and_rap':
    |            {'object_type': 'ap',
    |             'payload': ['ap_group', 'remote_ap']},
    |        'psk':
    |            {'object_type': 'ssid_profile',
    |             'payload': ['psk', ]},
    |    }
    |
    |    self.object_type_to_key_name = {'ap': 'ap_wiredmac', 'ssid_profile': 'ssid_profile_name'}

    A simpler example grammar for a fictional type of object called 'example' is as follows:

    |    self.parameters = {
    |        'value':
    |            {'object_type': 'example',
    |             'payload': ['value', 'modifier']}
    |    }
    |
    |    self.object_type_to_key_name = {'example': 'example_id',}

    The values in the 'payload' list are positional arguments, so the order that they appear in the list is important
    if you ever write requests manually. Here, for example, a complete request string may look like:

    |    {"command": "put_value",
    |     "object_type": "ap",
    |     "target": "example1",
    |     "params": {"value":"10", "modifier":"true"}}

    where "example1" is the "example_id" (a.k.a. "target"), "10" is the "value" and "true" is the "modifier".

    In the REST API, this would map to a PUT request to "/ap/example1/value" with a data payload of

    |    {'value':'10', 'modifier':'true'}

    """

    def __init__(self):
        self.parameters = {}
        self.object_type_to_key_name = {}
